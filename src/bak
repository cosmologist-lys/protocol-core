use std::ptr::read;

use crate::{
    core::{raw::Rawfield, reader::Reader},
    defi::{
        ProtocolResult,
        error::{ProtocolError, comm_error::CommError, hex_digest_error::ProtocolDigestError},
    },
    digester::aes_digester::{AesCipher, AesMode},
    utils::{crc_util, hex_util},
};

pub mod core;
pub mod defi;
pub mod digester;
pub mod utils;

// just for testing
fn main() -> ProtocolResult<()> {
    test_hex()
}

fn test_hex() -> ProtocolResult<()> {
    let hex = "68000100711C01003700040C33373432343031303030303230303030303030303030303030303030303030303006E3DEB523054C63DAE0CD380F2576E976FFAD5E55B29BD8FAD9BDB561F7DD2D9BF41A4061140F64A22A5BF15485777294D38C1A003285B3BDE7A72DC10DA77C903F9E16";
    let buffer = hex_util::hex_to_bytes(hex).unwrap();
    let mut reader = Reader::new(buffer.as_slice());

    // head
    reader
        .read_and_translate_head(1, |h| {
            let value = hex_util::bytes_to_hex(h)?;
            if h[0] != 0x68 {
                return Err(ProtocolError::ProtocolDigestError(
                    ProtocolDigestError::InvalidHead,
                ));
            }
            let rf = Rawfield::new(h, "head", value.as_str());
            Ok(rf)
        })?
        .read_and_translate_tail(1, |h| {
            let value = hex_util::bytes_to_hex(h)?;
            if h[0] != 0x16 {
                return Err(ProtocolError::ProtocolDigestError(
                    ProtocolDigestError::InvalidHead,
                ));
            }
            let rf = Rawfield::new(h, "tail", value.as_str());
            Ok(rf)
        })?
        .read_and_translate_crc(2, defi::crc_enum::CrcType::Crc16Xmodem, 5, -3)?;

    let rf = reader.to_report_fields()?;
    println!("result : {:?}", rf);

    Ok(())
}

fn test_aes() {
    let key = b"0123456789abcdef";
    let data = b"Hello, AES ECBd!";

    println!("ori-data : {:?}", data);

    let cipher = AesCipher::new(key, AesMode::CBC).unwrap();

    let encrypted = cipher.encrypt(data, &[1]).unwrap();
    let decrypted = cipher.decrypt(&encrypted, &[1]).unwrap();

    println!("encrypted = {:?}", encrypted);
    println!("decrypted = {:?}", decrypted);

    // let encrypted_str = String::from_utf8(encrypted).unwrap();
    // let decrypted_str = String::from_utf8(decrypted).unwrap();

    // println!("encrypted_str = {}", encrypted_str);
    // println!("decrypted_str = {}", decrypted_str);
}
